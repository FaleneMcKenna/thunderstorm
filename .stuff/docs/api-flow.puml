@startuml
participant "Withings\nDevice" as device #lightGray
participant "ElliQ" as eq
database "Firestore" as firestore
participant "BE" as be
participant "FE" as fe
participant "Listener\nNotify" as notify
database "Withings Api" as withings
participant "Withings OAuth2" as oauth2
actor "user" as user #orange
group authentication in middleware
    user -> fe: init auth
    fe -> be: requests url
    be -> be: Build oauth2 url
    be -> fe: sends back url
    fe -> oauth2: redirect to login page using url
    oauth2 -> be: token + relyState which contains unit data
    be -> firestore: upsert access token with unit data


    '   WithingsAuthModule.getAuth
    be -> oauth2: get Auth Token
    note left: TBD on how to link
    oauth2-> user: ask for confirmation
    user -> oauth2: confirmation

    oauth2 -> be: give AuthToken
    note left: by unit in project
    be -> oauth2: send AuthToken to get AccessToken
    oauth2 -> be: give accessToken & RefreshToken
    note left: refresh token expires after 1 year
    be <-> firestore: save accessToken & RefreshToken
    loop refresh authorization
    hnote over firestore: wait
    be -> oauth2: request new accessToken
    note left: the time before refresh is given in\nthe body of the AccessToken\n(should be 3 hours)

    oauth2 -> be: give new accessToken
    be -> firestore: write tokens \nto node
    end
end

== Usage ==

group subscription
    be -> notify: Subscribes to get notifications\n when data is available.
    note left #pink: Using the authentication retrieved above and saved in firestore
end

user -> device: use device
device -> withings: sends data usage
notify <-- withings: triggers \nNotify
notify -> be: api triggered
be -> withings: POST request triggers, asks for new data
withings -> be: replies with JSON
be -> firestore: writes JSON to collection

group Plan Usage Level
    eq->firestore: checks for available data
    eq<-firestore: pulls data for plan
    hnote over eq: updated\nIRLang
    eq->user: issues plan to user
end

@enduml